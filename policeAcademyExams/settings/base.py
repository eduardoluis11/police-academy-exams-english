"""
Base script for the Django settings for oposiciones_wordpress project.

The settings_NO_USAR.py script were generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/

"""

""" Este es el script base del settings de Django para el proyecto de oposiciones_wordpress.

Dividí el settings_NO_USAR.py en 3 archivos: base.py, local.py y production.py. Pues, este es el script con el código que
se reusará tanto en el entorno de desarrollo como en el entorno de producción. Es decir, el código de aquí se
reusará tanto en el script local.py como en el script production.py. 
"""

from pathlib import Path

""" Bibliotecas para coger las variables de entorno desde el modulo de python-dotenv.

Dado a que en este script se tienen que poner las credenciales de mi base de datos, y dado a que las credenciales de mi
base de datos las estoy obteniendo de un archivo .env, es mejor que ejecute aquí también el modulo de python-dotenv.
"""
from dotenv import load_dotenv
import os

""" Directorio base del proyecto.

Necesito esto para tener el PATH  o la ruta de mis templates de mi proyecto de Django.

Tuve que poner un tercer ".parent" ya que, ahora que puse mis settings en una carpeta llamada "settings", los
scripts local.py y production.py estan en una carpeta llamada "settings", que están dentro de la carpeta del proyecto
o "project" de Django. Entonces, como ya el script con la configuración de Django no está en la misma carpeta
que la carpeta "templates", tengo que subir un nivel más para poder llegar a la carpeta "templates".
"""
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Cargar las variables de entorno del archivo .env
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
""" Clave de Django.

Escondi la clave de Django en mi .env. 

Esto ya lo voy a usar en el script local.py y en el script production.py, por lo que no veo porque debo poner esto
aquí. Igual, yo no voy a ejecutar este script. El script que voy a ejecutar al ejecutar mi web app de django
es o local.py o production.py.
"""
# SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!

""" Variable DEBUG.

Escondi la variable DEBUG en mi .env.

Esto ya se obtiene tanto del script local.py como del script production.py, por lo que no veo porque debo poner esto
aquí. 
"""
# DEBUG = os.environ.get('DJANGO_DEBUG')

# Esto ya se obtiene tanto del script local.py como de production.py, por lo que no veo porque debo poner esto aquí
# ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'autenticacion',  # App de autenticacion
    'tests_administradores',  # App de Tests para Administradores
    'tests_clientes',  # App de Tests para Usuarios
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'policeAcademyExams.urls'

""" Aqui especifico el archivo de templates que se usará para renderizar las vistas de las apps.

Como mi carpeta "templates" esta dentro de la carpeta con el nombre de mi proyecto dedjango (oposiciones_wordpress), 
tengo que especificar el PATH en la variable 'DIRS'.
"""
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'policeAcademyExams', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'policeAcademyExams.wsgi.application'

""" Este es mi propio Backend de Autenticacion que he creado en la app de autenticacion, el cual le
permite a los usuarios autenticarse con su email de Wordpress, y con su Numero de Pedido.

Add the custom authentication backend to the AUTHENTICATION_BACKENDS setting in your settings_NO_USAR.py file.
"""
AUTHENTICATION_BACKENDS = [
    # 'autenticacion.backends.WooCommerceSubscriptionBackend', # Custom backend. I WON'T USE THIS ANY LONGER.
    'django.contrib.auth.backends.ModelBackend',  # Default Django auth
]

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

""" Idioma del Panel de Administración de Django.

La voy a cambiar a español.
"""
LANGUAGE_CODE = 'es-es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

""" Al parecer, esto hará que yo pueda detectar la carpeta "static" en la carpeta raíz de mi web app de Django.
"""
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]

""" Aquí especifico la carpeta la ruta de la carpeta "media", que es donde se guardaran los archivos multimedia que se 
suban a la web app de Django.

"""
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# This will let me user the AbstractUser model to be able to authenticate my users
AUTH_USER_MODEL = 'autenticacion.User'

""" Backend del Email.

Por los momentos, enviaré todos los emails desde Django a la consola (fuente: JeffP en 
https://stackoverflow.com/questions/50117425/django-why-is-console-email-backend-not-sending-emails ). 
MODIFICAR DESPUES para que envie un email al email del usuario en lugar de la consola.

Con esto, podré enviar los emails con el enlace para resetear la contraseña a la consola en lugar
de tener que configurar un email.)

OCULTAR EN EL .env.

Esto ya lo voy a obtener del script local.py y en el script production.py, por lo que no veo porque debo poner esto
aquí.
"""
# EMAIL_BACKEND = os.environ.get('EMAIL_BACKEND')
